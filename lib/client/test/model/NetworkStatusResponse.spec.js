/**
 * Copyright (c) 2020 DigiByte Foundation NZ Limited
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Rosetta
 * A Standard for Blockchain Interaction
 *
 * The version of the OpenAPI document: 1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Rosetta);
  }
}(this, function(expect, Rosetta) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Rosetta.NetworkStatusResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  };

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  };

  describe('NetworkStatusResponse', function() {
    it('should create an instance of NetworkStatusResponse', function() {
      // uncomment below and update the code to test NetworkStatusResponse
      //var instane = new Rosetta.NetworkStatusResponse();
      //expect(instance).to.be.a(Rosetta.NetworkStatusResponse);
    });

    it('should have the property currentBlockIdentifier (base name: "current_block_identifier")', function() {
      // uncomment below and update the code to test the property currentBlockIdentifier
      //var instane = new Rosetta.NetworkStatusResponse();
      //expect(instance).to.be();
    });

    it('should have the property currentBlockTimestamp (base name: "current_block_timestamp")', function() {
      // uncomment below and update the code to test the property currentBlockTimestamp
      //var instane = new Rosetta.NetworkStatusResponse();
      //expect(instance).to.be();
    });

    it('should have the property genesisBlockIdentifier (base name: "genesis_block_identifier")', function() {
      // uncomment below and update the code to test the property genesisBlockIdentifier
      //var instane = new Rosetta.NetworkStatusResponse();
      //expect(instance).to.be();
    });

    it('should have the property peers (base name: "peers")', function() {
      // uncomment below and update the code to test the property peers
      //var instane = new Rosetta.NetworkStatusResponse();
      //expect(instance).to.be();
    });

  });

}));
