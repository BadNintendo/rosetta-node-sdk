/**
 * Copyright (c) 2020 DigiByte Foundation NZ Limited
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Rosetta
 * A Standard for Blockchain Interaction
 *
 * The version of the OpenAPI document: 1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AccountBalanceRequest from './model/AccountBalanceRequest';
import AccountBalanceResponse from './model/AccountBalanceResponse';
import AccountIdentifier from './model/AccountIdentifier';
import Allow from './model/Allow';
import Amount from './model/Amount';
import Block from './model/Block';
import BlockIdentifier from './model/BlockIdentifier';
import BlockRequest from './model/BlockRequest';
import BlockResponse from './model/BlockResponse';
import BlockTransactionRequest from './model/BlockTransactionRequest';
import BlockTransactionResponse from './model/BlockTransactionResponse';
import ConstructionMetadataRequest from './model/ConstructionMetadataRequest';
import ConstructionMetadataResponse from './model/ConstructionMetadataResponse';
import ConstructionSubmitRequest from './model/ConstructionSubmitRequest';
import ConstructionSubmitResponse from './model/ConstructionSubmitResponse';
import Currency from './model/Currency';
import Error from './model/Error';
import MempoolRequest from './model/MempoolRequest';
import MempoolResponse from './model/MempoolResponse';
import MempoolTransactionRequest from './model/MempoolTransactionRequest';
import MempoolTransactionResponse from './model/MempoolTransactionResponse';
import MetadataRequest from './model/MetadataRequest';
import NetworkIdentifier from './model/NetworkIdentifier';
import NetworkListResponse from './model/NetworkListResponse';
import NetworkOptionsResponse from './model/NetworkOptionsResponse';
import NetworkRequest from './model/NetworkRequest';
import NetworkStatusResponse from './model/NetworkStatusResponse';
import Operation from './model/Operation';
import OperationIdentifier from './model/OperationIdentifier';
import OperationStatus from './model/OperationStatus';
import PartialBlockIdentifier from './model/PartialBlockIdentifier';
import Peer from './model/Peer';
import SubAccountIdentifier from './model/SubAccountIdentifier';
import SubNetworkIdentifier from './model/SubNetworkIdentifier';
import Transaction from './model/Transaction';
import TransactionIdentifier from './model/TransactionIdentifier';
import Version from './model/Version';
import AccountApi from './api/AccountApi';
import BlockApi from './api/BlockApi';
import ConstructionApi from './api/ConstructionApi';
import MempoolApi from './api/MempoolApi';
import NetworkApi from './api/NetworkApi';

import promises from './api/promises';

/**
* A_Standard_for_Blockchain_Interaction.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var Rosetta = require('index'); // See note below*.
* var xxxSvc = new Rosetta.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new Rosetta.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new Rosetta.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new Rosetta.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.3.1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AccountBalanceRequest model constructor.
     * @property {module:model/AccountBalanceRequest}
     */
    AccountBalanceRequest,

    /**
     * The AccountBalanceResponse model constructor.
     * @property {module:model/AccountBalanceResponse}
     */
    AccountBalanceResponse,

    /**
     * The AccountIdentifier model constructor.
     * @property {module:model/AccountIdentifier}
     */
    AccountIdentifier,

    /**
     * The Allow model constructor.
     * @property {module:model/Allow}
     */
    Allow,

    /**
     * The Amount model constructor.
     * @property {module:model/Amount}
     */
    Amount,

    /**
     * The Block model constructor.
     * @property {module:model/Block}
     */
    Block,

    /**
     * The BlockIdentifier model constructor.
     * @property {module:model/BlockIdentifier}
     */
    BlockIdentifier,

    /**
     * The BlockRequest model constructor.
     * @property {module:model/BlockRequest}
     */
    BlockRequest,

    /**
     * The BlockResponse model constructor.
     * @property {module:model/BlockResponse}
     */
    BlockResponse,

    /**
     * The BlockTransactionRequest model constructor.
     * @property {module:model/BlockTransactionRequest}
     */
    BlockTransactionRequest,

    /**
     * The BlockTransactionResponse model constructor.
     * @property {module:model/BlockTransactionResponse}
     */
    BlockTransactionResponse,

    /**
     * The ConstructionMetadataRequest model constructor.
     * @property {module:model/ConstructionMetadataRequest}
     */
    ConstructionMetadataRequest,

    /**
     * The ConstructionMetadataResponse model constructor.
     * @property {module:model/ConstructionMetadataResponse}
     */
    ConstructionMetadataResponse,

    /**
     * The ConstructionSubmitRequest model constructor.
     * @property {module:model/ConstructionSubmitRequest}
     */
    ConstructionSubmitRequest,

    /**
     * The ConstructionSubmitResponse model constructor.
     * @property {module:model/ConstructionSubmitResponse}
     */
    ConstructionSubmitResponse,

    /**
     * The Currency model constructor.
     * @property {module:model/Currency}
     */
    Currency,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The MempoolRequest model constructor.
     * @property {module:model/MempoolRequest}
     */
    MempoolRequest,

    /**
     * The MempoolResponse model constructor.
     * @property {module:model/MempoolResponse}
     */
    MempoolResponse,

    /**
     * The MempoolTransactionRequest model constructor.
     * @property {module:model/MempoolTransactionRequest}
     */
    MempoolTransactionRequest,

    /**
     * The MempoolTransactionResponse model constructor.
     * @property {module:model/MempoolTransactionResponse}
     */
    MempoolTransactionResponse,

    /**
     * The MetadataRequest model constructor.
     * @property {module:model/MetadataRequest}
     */
    MetadataRequest,

    /**
     * The NetworkIdentifier model constructor.
     * @property {module:model/NetworkIdentifier}
     */
    NetworkIdentifier,

    /**
     * The NetworkListResponse model constructor.
     * @property {module:model/NetworkListResponse}
     */
    NetworkListResponse,

    /**
     * The NetworkOptionsResponse model constructor.
     * @property {module:model/NetworkOptionsResponse}
     */
    NetworkOptionsResponse,

    /**
     * The NetworkRequest model constructor.
     * @property {module:model/NetworkRequest}
     */
    NetworkRequest,

    /**
     * The NetworkStatusResponse model constructor.
     * @property {module:model/NetworkStatusResponse}
     */
    NetworkStatusResponse,

    /**
     * The Operation model constructor.
     * @property {module:model/Operation}
     */
    Operation,

    /**
     * The OperationIdentifier model constructor.
     * @property {module:model/OperationIdentifier}
     */
    OperationIdentifier,

    /**
     * The OperationStatus model constructor.
     * @property {module:model/OperationStatus}
     */
    OperationStatus,

    /**
     * The PartialBlockIdentifier model constructor.
     * @property {module:model/PartialBlockIdentifier}
     */
    PartialBlockIdentifier,

    /**
     * The Peer model constructor.
     * @property {module:model/Peer}
     */
    Peer,

    /**
     * The SubAccountIdentifier model constructor.
     * @property {module:model/SubAccountIdentifier}
     */
    SubAccountIdentifier,

    /**
     * The SubNetworkIdentifier model constructor.
     * @property {module:model/SubNetworkIdentifier}
     */
    SubNetworkIdentifier,

    /**
     * The Transaction model constructor.
     * @property {module:model/Transaction}
     */
    Transaction,

    /**
     * The TransactionIdentifier model constructor.
     * @property {module:model/TransactionIdentifier}
     */
    TransactionIdentifier,

    /**
     * The Version model constructor.
     * @property {module:model/Version}
     */
    Version,

    /**
    * The AccountApi service constructor.
    * @property {module:api/AccountApi}
    */
    AccountApi,

    /**
    * The BlockApi service constructor.
    * @property {module:api/BlockApi}
    */
    BlockApi,

    /**
    * The ConstructionApi service constructor.
    * @property {module:api/ConstructionApi}
    */
    ConstructionApi,

    /**
    * The MempoolApi service constructor.
    * @property {module:api/MempoolApi}
    */
    MempoolApi,

    /**
    * The NetworkApi service constructor.
    * @property {module:api/NetworkApi}
    */
    NetworkApi,

    promises,
};
