/**
 * Rosetta
 * A Standard for Blockchain Interaction
 *
 * The version of the OpenAPI document: 1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NetworkIdentifier from './NetworkIdentifier';

/**
 * The ConstructionMetadataRequest model module.
 * @module model/ConstructionMetadataRequest
 * @version 1.3.1
 */
class ConstructionMetadataRequest {
    /**
     * Constructs a new <code>ConstructionMetadataRequest</code>.
     * A ConstructionMetadataRequest is utilized to get information required to construct a transaction. The Options object used to specify which metadata to return is left purposely unstructured to allow flexibility for implementers.
     * @alias module:model/ConstructionMetadataRequest
     * @param networkIdentifier {module:model/NetworkIdentifier} 
     * @param options {Object} Some blockchains require different metadata for different types of transaction construction (ex: delegation versus a transfer). Instead of requiring a blockchain node to return all possible types of metadata for construction (which may require multiple node fetches), the client can populate an options object to limit the metadata returned to only the subset required.
     */
    constructor(networkIdentifier, options) { 
        
        ConstructionMetadataRequest.initialize(this, networkIdentifier, options);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, networkIdentifier, options) { 
        obj['network_identifier'] = networkIdentifier;
        obj['options'] = options;
    }

    /**
     * Constructs a <code>ConstructionMetadataRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConstructionMetadataRequest} obj Optional instance to populate.
     * @return {module:model/ConstructionMetadataRequest} The populated <code>ConstructionMetadataRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConstructionMetadataRequest();

            if (data.hasOwnProperty('network_identifier')) {
                obj['network_identifier'] = NetworkIdentifier.constructFromObject(data['network_identifier']);
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], Object);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/NetworkIdentifier} network_identifier
 */
ConstructionMetadataRequest.prototype['network_identifier'] = undefined;

/**
 * Some blockchains require different metadata for different types of transaction construction (ex: delegation versus a transfer). Instead of requiring a blockchain node to return all possible types of metadata for construction (which may require multiple node fetches), the client can populate an options object to limit the metadata returned to only the subset required.
 * @member {Object} options
 */
ConstructionMetadataRequest.prototype['options'] = undefined;






export default ConstructionMetadataRequest;

