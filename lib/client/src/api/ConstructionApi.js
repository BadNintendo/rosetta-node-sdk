/**
 * Copyright (c) 2020 DigiByte Foundation NZ Limited
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Rosetta
 * A Standard for Blockchain Interaction
 *
 * The version of the OpenAPI document: 1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConstructionMetadataRequest from '../model/ConstructionMetadataRequest';
import ConstructionMetadataResponse from '../model/ConstructionMetadataResponse';
import ConstructionSubmitRequest from '../model/ConstructionSubmitRequest';
import ConstructionSubmitResponse from '../model/ConstructionSubmitResponse';
import Error from '../model/Error';

import promisify from '../promisify';


/**
* Construction service.
* @module api/ConstructionApi
* @version 1.3.1
*/
export default class ConstructionApi {

    /**
    * Constructs a new ConstructionApi. 
    * @alias module:api/ConstructionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        promisify(this, ['constructionMetadata', 'constructionSubmit']);
    }


    /**
     * Callback function to receive the result of the constructionMetadata operation.
     * @callback module:api/ConstructionApi~constructionMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConstructionMetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transaction Construction Metadata
     * Get any information required to construct a transaction for a specific network. Metadata returned here could be a recent hash to use, an account sequence number, or even arbitrary chain state. It is up to the client to correctly populate the options object with any network-specific details to ensure the correct metadata is retrieved.  It is important to clarify that this endpoint should not pre-construct any transactions for the client (this should happen in the SDK). This endpoint is left purposely unstructured because of the wide scope of metadata that could be required.  In a future version of the spec, we plan to pass an array of Rosetta Operations to specify which metadata should be received and to create a transaction in an accompanying SDK. This will help to insulate the client from chain-specific details that are currently required here.
     * @param {module:model/ConstructionMetadataRequest} constructionMetadataRequest 
     * @param {module:api/ConstructionApi~constructionMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConstructionMetadataResponse}
     */
    constructionMetadata(constructionMetadataRequest, callback) {
      let postBody = constructionMetadataRequest;
      // verify the required parameter 'constructionMetadataRequest' is set
      if (constructionMetadataRequest === undefined || constructionMetadataRequest === null) {
        throw new Error("Missing the required parameter 'constructionMetadataRequest' when calling constructionMetadata");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConstructionMetadataResponse;
      return this.apiClient.callApi(
        '/construction/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the constructionSubmit operation.
     * @callback module:api/ConstructionApi~constructionSubmitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConstructionSubmitResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a Signed Transaction
     * Submit a pre-signed transaction to the node. This call should not block on the transaction being included in a block. Rather, it should return immediately with an indication of whether or not the transaction was included in the mempool.  The transaction submission response should only return a 200 status if the submitted transaction could be included in the mempool. Otherwise, it should return an error.
     * @param {module:model/ConstructionSubmitRequest} constructionSubmitRequest 
     * @param {module:api/ConstructionApi~constructionSubmitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConstructionSubmitResponse}
     */
    constructionSubmit(constructionSubmitRequest, callback) {
      let postBody = constructionSubmitRequest;
      // verify the required parameter 'constructionSubmitRequest' is set
      if (constructionSubmitRequest === undefined || constructionSubmitRequest === null) {
        throw new Error("Missing the required parameter 'constructionSubmitRequest' when calling constructionSubmit");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConstructionSubmitResponse;
      return this.apiClient.callApi(
        '/construction/submit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
