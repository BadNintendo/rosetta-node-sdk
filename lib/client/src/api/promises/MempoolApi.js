/**
 * Copyright (c) 2020 DigiByte Foundation NZ Limited
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Rosetta
 * A Standard for Blockchain Interaction
 *
 * The version of the OpenAPI document: 1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../../ApiClient";
import Error from '../../model/Error';
import MempoolRequest from '../../model/MempoolRequest';
import MempoolResponse from '../../model/MempoolResponse';
import MempoolTransactionRequest from '../../model/MempoolTransactionRequest';
import MempoolTransactionResponse from '../../model/MempoolTransactionResponse';

/**
* Mempool service.
* @module api/MempoolApi
* @version 1.3.1
*/
export default class MempoolApi {

    /**
    * Constructs a new MempoolApi. 
    * @alias module:api/MempoolApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get All Mempool Transactions
     * Get all Transaction Identifiers in the mempool
     * @param {module:model/MempoolRequest} mempoolRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MempoolResponse} and HTTP response
     */
    mempoolWithHttpInfo(mempoolRequest) {
      let postBody = mempoolRequest;
      // verify the required parameter 'mempoolRequest' is set
      if (mempoolRequest === undefined || mempoolRequest === null) {
        throw new Error("Missing the required parameter 'mempoolRequest' when calling mempool");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MempoolResponse;
      return this.apiClient.callApiPromised(
        '/mempool', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get All Mempool Transactions
     * Get all Transaction Identifiers in the mempool
     * @param {module:model/MempoolRequest} mempoolRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MempoolResponse}
     */
    mempool(mempoolRequest) {
      return this.mempoolWithHttpInfo(mempoolRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a Mempool Transaction
     * Get a transaction in the mempool by its Transaction Identifier. This is a separate request than fetching a block transaction (/block/transaction) because some blockchain nodes need to know that a transaction query is for something in the mempool instead of a transaction in a block.  Transactions may not be fully parsable until they are in a block (ex: may not be possible to determine the fee to pay before a transaction is executed). On this endpoint, it is ok that returned transactions are only estimates of what may actually be included in a block.
     * @param {module:model/MempoolTransactionRequest} mempoolTransactionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MempoolTransactionResponse} and HTTP response
     */
    mempoolTransactionWithHttpInfo(mempoolTransactionRequest) {
      let postBody = mempoolTransactionRequest;
      // verify the required parameter 'mempoolTransactionRequest' is set
      if (mempoolTransactionRequest === undefined || mempoolTransactionRequest === null) {
        throw new Error("Missing the required parameter 'mempoolTransactionRequest' when calling mempoolTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MempoolTransactionResponse;
      return this.apiClient.callApiPromised(
        '/mempool/transaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a Mempool Transaction
     * Get a transaction in the mempool by its Transaction Identifier. This is a separate request than fetching a block transaction (/block/transaction) because some blockchain nodes need to know that a transaction query is for something in the mempool instead of a transaction in a block.  Transactions may not be fully parsable until they are in a block (ex: may not be possible to determine the fee to pay before a transaction is executed). On this endpoint, it is ok that returned transactions are only estimates of what may actually be included in a block.
     * @param {module:model/MempoolTransactionRequest} mempoolTransactionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MempoolTransactionResponse}
     */
    mempoolTransaction(mempoolTransactionRequest) {
      return this.mempoolTransactionWithHttpInfo(mempoolTransactionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
