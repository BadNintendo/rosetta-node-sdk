/**
 * Copyright (c) 2020 DigiByte Foundation NZ Limited
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Rosetta
 * A Standard for Blockchain Interaction
 *
 * The version of the OpenAPI document: 1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Error from '../model/Error';
import MetadataRequest from '../model/MetadataRequest';
import NetworkListResponse from '../model/NetworkListResponse';
import NetworkOptionsResponse from '../model/NetworkOptionsResponse';
import NetworkRequest from '../model/NetworkRequest';
import NetworkStatusResponse from '../model/NetworkStatusResponse';

import promisify from '../promisify';

/**
* Network service.
* @module api/NetworkApi
* @version 1.3.1
*/
export default class NetworkApi {

    /**
    * Constructs a new NetworkApi. 
    * @alias module:api/NetworkApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        promisify(this, ['networkList', 'networkOptions', 'networkStatus']);
    }


    /**
     * Callback function to receive the result of the networkList operation.
     * @callback module:api/NetworkApi~networkListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List of Available Networks
     * This endpoint returns a list of NetworkIdentifiers that the Rosetta server can handle.
     * @param {module:model/MetadataRequest} metadataRequest 
     * @param {module:api/NetworkApi~networkListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkListResponse}
     */
    networkList(metadataRequest, callback) {
      let postBody = metadataRequest;
      // verify the required parameter 'metadataRequest' is set
      if (metadataRequest === undefined || metadataRequest === null) {
        throw new Error("Missing the required parameter 'metadataRequest' when calling networkList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NetworkListResponse;
      return this.apiClient.callApi(
        '/network/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkOptions operation.
     * @callback module:api/NetworkApi~networkOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Network Options
     * This endpoint returns the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here.  Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
     * @param {module:model/NetworkRequest} networkRequest 
     * @param {module:api/NetworkApi~networkOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkOptionsResponse}
     */
    networkOptions(networkRequest, callback) {
      let postBody = networkRequest;
      // verify the required parameter 'networkRequest' is set
      if (networkRequest === undefined || networkRequest === null) {
        throw new Error("Missing the required parameter 'networkRequest' when calling networkOptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NetworkOptionsResponse;
      return this.apiClient.callApi(
        '/network/options', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkStatus operation.
     * @callback module:api/NetworkApi~networkStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Network Status
     * This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
     * @param {module:model/NetworkRequest} networkRequest 
     * @param {module:api/NetworkApi~networkStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkStatusResponse}
     */
    networkStatus(networkRequest, callback) {
      let postBody = networkRequest;
      // verify the required parameter 'networkRequest' is set
      if (networkRequest === undefined || networkRequest === null) {
        throw new Error("Missing the required parameter 'networkRequest' when calling networkStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NetworkStatusResponse;
      return this.apiClient.callApi(
        '/network/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }
}
